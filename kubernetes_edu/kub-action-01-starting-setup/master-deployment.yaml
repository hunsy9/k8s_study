apiVersion: v1 # Service는 기본적으로 apiVersion이 core/v1임. 따라서 core 생략가능
kind: Service # 해당 config 파일은 Service 구성 파일임을 명시
metadata:
  name: backend # Service 이름 설정
spec:
  selector:
    app: second-app # 파드의 label과 일치되는 파드들을 관리할 것임을 명시
  ports: # 어떤식으로 Deployment를 외부 세계에 노출할지 명세
    - protocol: 'TCP' # 프로토콜은 TCP
      port: 80 # 외부 포트는 80
      targetPort: 8080 # 파드 내부 포트는 8080
  type: LoadBalancer # 로드밸런서 타입으로 노출

# 이런식으로 단일 구성파일을 적용하는 경우, service 객체가 먼저 있는게 좋음

--- # 완전히 새로운 객체 구성 파일 시작
apiVersion: apps/v1 # apiVersion 명세
kind: Deployment # 구성 파일이 Deployment 객체임을 명시
metadata:
  name: second-app-deployment # Deployment 객체 이름 설정
spec:
  replicas: 1 # 파드의 레플리카 셋 몇 개할지 설정
  selector:
    matchLabels:
      app: second-app # 라벨(k:v)이 맞는 파드들을 이 Deployment 객체가 책임지겠다를 명시 
  template: # 파드의 템플릿은 어떻게 할 것인가?
    metadata:
      labels:
        app: second-app # 라벨 설정
    spec: # 파드의 스펙
      containers: # 지금은 컨테이너 하나만
        - name: second-node # 컨테이너 이름
          image: juniper0917/kub-first-app:2 # 컨테이너 베이스 이미지


# kubectl apply -f=deployment.yaml 
# 위 명령어로 해당 구성 적용 가능

# kubectl delete -f=deployment.yaml
# 위 명령어로 쿠버네티스 클러스터에서 구성 제거 가능